// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using infra;

#nullable disable

namespace infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Img_bin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("User_Task_Id")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("User_Task_Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Icon")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Img_bin")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<Guid>("User_Task_Id")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("User_Task_Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("domain.Entities.Membering", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Membering");
                });

            modelBuilder.Entity("domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Due")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("Group_Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Group_Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("domain.Entities.User_Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Task");
                });

            modelBuilder.Entity("domain.Entities.Comment", b =>
                {
                    b.HasOne("domain.Entities.User_Task", "User_Task")
                        .WithMany("Comment")
                        .HasForeignKey("User_Task_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User_Task");
                });

            modelBuilder.Entity("domain.Entities.Image", b =>
                {
                    b.HasOne("domain.Entities.User_Task", "User_Task")
                        .WithMany("Image")
                        .HasForeignKey("User_Task_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User_Task");
                });

            modelBuilder.Entity("domain.Entities.Membering", b =>
                {
                    b.HasOne("domain.Entities.Group", "Group")
                        .WithMany("Membering")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.User", "User")
                        .WithMany("Membering")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.Entities.Task", b =>
                {
                    b.HasOne("domain.Entities.Group", "Group")
                        .WithMany("Task")
                        .HasForeignKey("Group_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("domain.Entities.User_Task", b =>
                {
                    b.HasOne("domain.Entities.Task", "Task")
                        .WithMany("User_Task")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("domain.Entities.User", "User")
                        .WithMany("User_Task")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.Entities.Group", b =>
                {
                    b.Navigation("Membering");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("domain.Entities.Task", b =>
                {
                    b.Navigation("User_Task");
                });

            modelBuilder.Entity("domain.Entities.User", b =>
                {
                    b.Navigation("Membering");

                    b.Navigation("User_Task");
                });

            modelBuilder.Entity("domain.Entities.User_Task", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Image");
                });
#pragma warning restore 612, 618
        }
    }
}
